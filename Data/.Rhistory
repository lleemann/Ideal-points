}
points(lowess(DATA$year[DATA$year>1835&DATA$cantonnr==1],DATA$babydeathratio_impute[DATA$year>1835&DATA$cantonnr==1],f=0.05), type="l",col=rgb(160,32,240,200,maxColorValue=255), lwd=2)
DATA <- read.dta("/Users/lleemann/Dropbox/Dissertation/Paper 1 - Origins DD/Data/HDDI_april.dta")
DATA <- read.dta("/Users/lleemann/Dropbox/Dissertation/Paper 1 - Origins DD/Data/HDDI_april1.dta")
par(family="CMU Serif")
plot(lowess(DATA$year[DATA$year>1865&DATA$cantonnr==1],DATA$babydeathratio_impute[DATA$year>1865&DATA$cantonnr==1],f=0.05), type="l", col=rgb(190,190,190,200,maxColorValue=255), lwd=2, ylab="Infant Mortality", ylim=c(0,0.39), xlab="Year", xlim=c(1836,2000))
for (k in c(2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,21,23)){
points(lowess(DATA$year[DATA$year>1865&DATA$cantonnr==k],DATA$babydeathratio_impute[DATA$year>1865&DATA$cantonnr==k],f=0.05), type="l",col=rgb(190,190,190,200,maxColorValue=255), lwd=2)
}
for (k in c(11,20,22,24,25)){
points(lowess(DATA$year[DATA$year>1835&DATA$cantonnr==k],DATA$babydeathratio_impute[DATA$year>1835&DATA$cantonnr==k],f=0.05), type="l",col=rgb(190,190,190,200,maxColorValue=255), lwd=2)
}
points(lowess(DATA$year[DATA$year>1835&DATA$cantonnr==1],DATA$babydeathratio_impute[DATA$year>1835&DATA$cantonnr==1],f=0.05), type="l",col=rgb(160,32,240,200,maxColorValue=255), lwd=2)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real theta[J];
real mu;
real<lower=0> tau;
}
model {
theta ~ normal(mu, tau);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit1 <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4, cores=1)
fit1 <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4, cores=2)
library(rstan)
rstan_options(auto_write = TRUE)
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real theta[J];
real mu;
real<lower=0> tau;
}
model {
theta ~ normal(mu, tau);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit1 <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4, cores=1)
fit1 <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4, cores=2)
options(mc.cores = 2)
help(options)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", type = "source")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real theta[J];
real mu;
real<lower=0> tau;
}
model {
theta ~ normal(mu, tau);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit1 <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4, cores=2)
# Richie & Luke!
rm(list=ls())
library(dplyr)
source("/Users/lleemann/Dropbox/API AWS.R")
library(MTurkR)
source("/Users/lleemann/Dropbox/API AWS.R")
library(MTurkR)
# Richie & Luke!
rm(list=ls())
library(dplyr)
source("/Users/lleemann/Dropbox/API AWS.R")
library(MTurkR)
library(MTurkR)
library(rstan)
help(stan)
lucas <- readRDS("/Users/lleemann/Desktop/lucas.Rds")
head(lucas)
lucas
lucas[-1:500,]
lucas[-c(1:500),]
lucas[-c(1:600),]
lucas[-c(1:400),]
lucas[-c(1:600),]
TG <- readRDS("/Users/lleemann/Dropbox/Prepaid postage project/gmde_data/TG.Rds")
TG
lucas
write.csv(lucas,file="/Users/lleemann/Dropbox/RA Nadine Golinelli/Votes CH/Votes.csv")
objects()
pnorm(1/1.5)
pnorm(1.5/1.5)
pnorm(1/1.5)
pnorm((51-50)/1.5)
p.49 <- c(.1)
p.50 <- c(.2)
p.51 <- c(.3)
sigma <- (51 - 50)/(qnorm(p.51) - qnorm(p.50))
sigma
mu <- (50*qnorm(p.51) - 51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
mu
p.49 <- c(.08)
p.50 <- c(.2)
p.51 <- c(.3)
sigma <- (51 - 50)/(qnorm(p.51) - qnorm(p.50))
sigma
sigma23 <- (51 - 50)/(qnorm(p.51) - qnorm(p.50))
sigma23
sigma12 <- (50 - 49)/(qnorm(p.50) - qnorm(p.49))
sigma12
qnorm(1)
qnorm(1.95)
qnorm(.95)
qnorm(.975)
mu <- (50*qnorm(p.51) - 51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
mu
mu <- (51*qnorm(p.51) - 50*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
mu
mu <- (50*qnorm(p.51) - 51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
mu
pnorm((52.5-20)/3.15)
pnorm((.525-.20)/3.15)
pnorm((.2-.52)/3.15)
p.49 <- c(.1)
p.50 <- c(.2)
p.51 <- c(.3)
sigma <- (51 - 50)/(qnorm(p.51) - qnorm(p.50))
mu <- (50*qnorm(p.51) - 51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
mu
sigma
qnorm((52.7-49)/3.15)
pnorm((52.7-49)/3.15)
pnorm((49-52.7)/3.15)
pnorm((p.49-mu)/sigma)
p.49 <- 10
p.50 <- 20
p.51 <- 30
sigma <- (51 - 50)/(qnorm(p.51) - qnorm(p.50))
mu <- (50*qnorm(p.51) - 51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
pnorm((p.49-mu)/sigma)
p.49 <- 10
p.50 <- 20
p.51 <- 30
sigma <- (51 - 50)/(qnorm(p.51/100) - qnorm(p.50/100))
mu <- (50*qnorm(p.51/100) - 51*qnorm(p.50/100)) / (qnorm(p.51/100) - qnorm(p.50/100))
pnorm((p.49-mu)/sigma)
p.49 <- c(.1)
p.50 <- c(.2)
p.51 <- c(.3)
sigma <- (51 - 50)/(qnorm(p.51) - qnorm(p.50))
mu <- (50*qnorm(p.51) - 51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
mu
pnorm((p.49-mu/100)/sigma)
p.49 <- c(.1)
p.50 <- c(.2)
p.51 <- c(.3)
sigma <- (.51 - .50)/(qnorm(p.51) - qnorm(p.50))
mu <- (.50*qnorm(p.51) - .51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
sigma
mu
p.49 <- c(.1)
p.50 <- c(.2)
p.51 <- c(.3)
sigma <- (.51 - .50)/(qnorm(p.51) - qnorm(p.50))
mu <- (.50*qnorm(p.51) - .51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
pnorm((p.49-mu)/sigma)
pnorm((.49-mu)/sigma)
p.49 <- c(.1)
p.50 <- c(.2)
p.51 <- c(.3)
sigma <- (.51 - .50)/(qnorm(p.51) - qnorm(p.50))
mu <- (.50*qnorm(p.51) - .51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
pnorm((.49-mu)/sigma)
pnorm((.50-mu)/sigma)
p.49 <- c(.1)
p.50 <- c(.2)
p.51 <- c(.3)
sigma <- (.51 - .50)/(qnorm(p.51) - qnorm(p.50))
mu <- (.50*qnorm(p.51) - .51*qnorm(p.50)) / (qnorm(p.51) - qnorm(p.50))
pnorm((.50-mu)/sigma)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real theta[J];
real mu;
real<lower=0> tau;
}
model {
theta ~ normal(mu, tau);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit1 <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4, cores=2)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real theta[J];
real mu;
real<lower=0> tau;
}
model {
theta ~ normal(mu, tau);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit1 <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4, cores=1)
fit1 <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4, cores=2)
library(xlsx)
install.packages("rJava",,"http://rforge.net/",type="source")
library(rJava)
brew reinstall R --with-openblas --with-java
install.packages('rJava',,'http://www.rforge.net/')
library(xlsx)
library(rJava)
library(rJava)
export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
export LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/server
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(rJava)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
ln -s /usr/local/lib/libjvm.dylib /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/
)
library(rJava)
library(rJava)
install.packages("/Users/lleemann/Downloads/rJava-master", repos = NULL, type="source")
javareconf
library(rJava)
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("/Users/lleemann/Downloads/rJava-master", repos = NULL, type="source")
install.packages("/Users/lleemann/Downloads/rJava-master", repos = NULL, type="source")
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("/Users/lleemann/Downloads/rJava-master", repos = NULL, type="source")
install.packages("/Users/lleemann/Downloads/rJava-master", repos = NULL, type="source")
library(rJava)
###############################################################
# IRT Tamedia Projekt -- Post-Processing
###############################################################
# GB und LL
# 15.3.2018
###############################################################
rm(list=ls())
library(rstan)
library(reshape2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(xtable)
setwd("~/Dropbox/IRT Tamedia/")
data1 <- read.csv("Data/votes_50_legislatur.csv")
## Re-run this code to get object "data3"
source("Code/identify_commission_2.R")
topics <- c("FK", "WBK", "RK", "WAK", "UREK", "SiK", "SGK", "Bü", "SPK", "APK","KVF", "GPK")
# read in all model results (across all issues)
stan.draws <- rep(list(NA),11)
mp.block.draws <- rep(list(NA),11)
number.of.votes <- rep(NA,length(topics))
result <- data.frame()
vote.result <- data.frame()
for (g in 1:length(topics)){
if (topics[g] %in% c("Bü", "GPK")){
next()
}
load(paste0("Objects/mps.", topics[g], ".RData"))
load(paste0("Objects/mp.block.", topics[g], ".RData"))
load(paste0("Objects/stan.fit.", topics[g], ".RData"))
load(paste0("Objects/vote.block.", topics[g], ".RData"))
sum <- as.data.frame(summary(stan.fit)[[1]])
stan.draws[[g]] <- stan.fit
mp.block.draws[[g]] <- mp.block
sum$par <- row.names(sum)
sum$par <- gsub("\\[.*?\\]", "", sum$par)
thetas <- filter(sum, par == "theta")
thetas <- cbind(thetas, mp.block)
thetas$kom <- topics[g]
number.of.votes[g] <- dim(filter(sum, par == "alpha"))[1]
alphas <- filter(sum, par == "alpha") %>% mutate(vote = vote_seq,
kom = topics[g])
betas <- filter(sum, par == "beta") %>% mutate(vote = vote_seq,
kom = topics[g])
vote.result <- bind_rows(vote.result, alphas, betas)
result <- bind_rows(result, thetas)
}
head(result)
################################################################################################
################################################################################################
# Check convergence
# Inspecting the Rhat value across four chains - values should be below 1.1
max(result$Rhat)
max(vote.result$Rhat)
################################################################################################
################################################################################################
# VISUALIZATION
setwd("~/Dropbox/IRT Tamedia/Plots/")
parties <- c("BD", "C", "G", "GL", "RL", "S", "V")
party.theta <- matrix(NA,3,7)
ff <- 13
par(mar=c(5.1,6.1,4.1,2.1), xpd=TRUE, family="CMU Serif")
plot(0,0, xlim=c(-(ff+2),ff), ylim=c(-.1,17), type="n", bty="n", ylab="",
xlab="",yaxt='n',xaxt='n')
axis(1,at = c(-10,-5,0,5,10))
adjL <- c(1:7)/10
counter <- 0
counter.vote <- 0
coL <- c(rgb(255,255,0,100,maxColorValue = 255),
rgb(255,165,0,100,maxColorValue = 255),
rgb(0,100,0,100,maxColorValue = 255),
rgb(0,255,0,100,maxColorValue = 255),
rgb(0,0,255,100,maxColorValue = 255),
rgb(255,0,0,100,maxColorValue = 255),
rgb(85,107,47,100,maxColorValue = 255))
coL.strong <- c(rgb(255,255,0,200,maxColorValue = 255),
rgb(255,165,0,200,maxColorValue = 255),
rgb(0,100,0,200,maxColorValue = 255),
rgb(0,255,0,200,maxColorValue = 255),
rgb(0,0,255,200,maxColorValue = 255),
rgb(255,0,0,200,maxColorValue = 255),
rgb(85,107,47,200,maxColorValue = 255))
# Loop over all areas
for (g in 1:length(topics)){
if(topics[g]!="Bü" & topics[g]!="GPK"){
#counter.vote <- counter.vote + 1  # used later to pick
draws <- as.matrix(stan.draws[[g]])
mpb <- mp.block.draws[[g]]
n.leg <- dim(mpb)[1]
NN <- dim(draws)[2]
draws.theta <- draws[,c((NN-n.leg):(NN-1))]
for (j in 1:7){
xx <- apply(draws.theta[,which(mpb[,5]==parties[j])],MARGIN = 1,mean)
#plot(density(xx))
party.theta[,j] <-  sort(xx)[c(length(xx)*0.025,length(xx)*0.5,length(xx)*0.975)]
}
### Normalization: SP at -10 and SVP at +10
interceptL <-   -party.theta[2,6]  # now SP at exactly 0
slopeL <- 20/(party.theta[2,7] - party.theta[2,6]) # factor by which we need to expand the difference between S and V to get to 20
party.theta <- slopeL * (party.theta + interceptL) - 10
rect(-13,mean(adjL) - 0.5,11, mean(adjL) + 0.5, col=rgb(190,190,190,50,maxColorValue = 255), border = "NA")
for ( k in 1:length(parties)){
counter <- counter + 1
points(party.theta[2,k],adjL[k], col=coL.strong[k], pch=19, cex=1)
segments(party.theta[1,k],adjL[k],party.theta[3,k],adjL[k], col=coL[k], lwd=4)
}
text(-19,mean(adjL),paste(topics[g],"\n (# Abst:", number.of.votes[g],
")"),pos = 4, cex=0.8)
adjL <- adjL + 2
}}
################################################################################################
################################################################################################
# DATA RESULT READ-OUT
# Transform the thetas in the oupt object
result <- subset(result, select = -c(se_mean,sd) )
colnames(result)[c(1,2,6)] <- c("Mittelwert", "CI (unten)", "CI (oben)")
result$Name <- NA
setwd("/Users/lleemann/Dropbox/IRT Tamedia/Report")
result.out <- data.frame(matrix(c(NA,NA,NA,NA,NA,NA),1,6))
colnames(result.out) <- c("Mittelwert", "CI (unten)", "CI (oben)", "Name", "Fraktion", "Kommission")
counter <- 0
for (g in 1:length(topics)){
if(topics[g]!="Bü" & topics[g]!="GPK"){
#counter.vote <- counter.vote + 1  # used later to pick
draws <- as.matrix(stan.draws[[g]])
mpb <- mp.block.draws[[g]]
n.leg <- dim(mpb)[1]
NN <- dim(draws)[2]
draws.theta <- draws[,c((NN-n.leg):(NN-1))]
for (j in 1:7){
xx <- apply(draws.theta[,which(mpb[,5]==parties[j])],MARGIN = 1,mean)
#plot(density(xx))
party.theta[,j] <-  sort(xx)[c(length(xx)*0.025,length(xx)*0.5,length(xx)*0.975)]
}
### Normalization: SP at -10 and SVP at +10
interceptL <-   -party.theta[2,6]  # now SP at exactly 0
slopeL <- 20/(party.theta[2,7] - party.theta[2,6]) # factor by which we need to expand the difference between S and V to get to 20
party.theta <- slopeL * (party.theta + interceptL) - 10
# function for rescaling
rescaleL <- function(x)  slopeL * (x + interceptL) - 10
aa <- min(which(result$kom==topics[g]))
bb <- max(which(result$kom==topics[g]))
result[aa:bb,1:6] <- rescaleL(result[aa:bb,1:6])
# sort by position (left to right)
ccc <- result[aa:bb,]
result[aa:bb,] <- ccc[order(ccc[,1]),]
result$Name[aa:bb] <- iconv(as.character(result[aa:bb,11]))
result$Name[aa:bb]  <- stringi::stri_replace_all_fixed(
result$Name[aa:bb] ,
c("ä", "ö", "ü", "Ä", "Ö", "Ü", "è", "é", "ë","î", "ç"),
c('\\"a', '\\"o', '\\"u', '\\"A', '\\"O', '\\"U',"\\`e","\\'e",'\\"e',"\\^i","\\c c"),
vectorize_all = FALSE
)
blockL <- result[aa:bb,c(1,2,6,28,14)]
blockL$Kommission <- topics[g]
result.out <- rbind(result.out, blockL)
sink(paste("result.",topics[g],".tex",sep=""))
print(xtable(result[aa:bb,c(1,2,6,28,14)]),tabular.environment = "longtable",floating=FALSE,
include.rownames=FALSE, sanitize.text.function = identity, sanitize.colnames.function = identity)
sink()
# Plot per topic
pdf(paste0("Plot",topics[g],".pdf"),width=12,height=8,paper='special')
block <- result[aa:bb,]
nnn <- dim(block)[1]
factorL <- 100
y.pos <- factorL *c(1:nnn)/nnn
plot(1, type="n", xlab="", ylab="", yaxt='n', bty="n", xlim=c(-20, 20), ylim=c(0, factorL))
for ( k in 1:length(parties)){
counter <- counter + 1
rowsL <- which(block[,14]==parties[k])
points(block[rowsL,1],  y.pos[rowsL],col=coL.strong[k], pch=19, cex=1)
segments(block[rowsL,2],y.pos[rowsL],block[rowsL,6],y.pos[rowsL], col=coL[k], lwd=1.9)
}
#text(-12,0.9*factorL, paste0("Positionen im Bereich der ", topics[g]), font=2, cex=1.5, pos=4)
legend(-12,0.9*factorL,legend=parties, col=coL.strong,pch=19, bty="n")
dev.off()
}}
setwd("/Users/lleemann/Dropbox/IRT Tamedia/")
vote.result.original <- vote.result
vote.result <- select(vote.result.original, vote, par, kom, mean, `2.5%`, `97.5%`) %>%
rename(VoteRegistrationNumber = vote,
Parameter = par,
Kommission = kom,
Mittelwert = mean,
upr = `2.5%`,
lwr = `97.5%`) %>%
mutate(VoteRegistrationNumber = substr(VoteRegistrationNumber, 6, nchar(VoteRegistrationNumber)))
vote.result <- merge(vote.result, (data1 %>% select(VoteRegistrationNumber, VoteSubmissionText) %>% distinct()))
vote.result <- mutate(vote.result,
Parameter = ifelse(Parameter == "alpha", "difficulty",
ifelse(Parameter == "beta", "discrimination", Parameter)),
VoteSubmissionText = as.character(VoteSubmissionText))
names(vote.result)[c(1,5:6)] <- c("Vote ID","CI (unten)", "CI (oben)")
for (topic in unique(vote.result$Kommission)){
temp_df <- filter(vote.result, Kommission == topic) %>% dplyr::arrange(Parameter, Mittelwert)
temp_df[,7]  <- stringi::stri_replace_all_fixed(
temp_df[,7],
c("ä", "ö", "ü", "Ä", "Ö", "Ü", "è", "é", "ë","î", "ç", "«","»","–"),
c('\\"a', '\\"o', '\\"u', '\\"A', '\\"O', '\\"U',"\\`e","\\'e",'\\"e',"\\^i","\\c c", '"', '"', "-"),
vectorize_all = FALSE
)
sink(paste("Report/vote.result.",topic,".tex",sep=""))
print(xtable(temp_df, align="lllllllp{6cm}"), tabular.environment = "longtable", floating=FALSE,
include.rownames=FALSE, sanitize.text.function = identity, sanitize.colnames.function = identity)
sink()
}
result.out <- result.out[-1,]
setwd("~/Dropbox/IRT Tamedia/Data/")
write.csv(result.out,file="write.out.1.csv")
write.csv(vote.result,file="write.out.votes.csv")
## Latex write-out for document
